// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  name              String
  password          String
  city              String
  country           String
  profilePicture    String?
  notificationToken String?
  pets              Pet[]             @relation("PetOwner")
  requests          AdoptionRequest[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  comments          Comment[]
  commentLike       CommentLike[]
  petLike           PetLike[]
  sentMessages      Message[]         @relation("SentMessages")
  receivedMessages  Message[]         @relation("ReceivedMessages")
}

model Pet {
  id           Int     @id @default(autoincrement())
  name         String
  breed        String
  age          Int
  isVaccinated Boolean @default(false)
  isSterilized Boolean @default(false)
  description  String?
  size         PetSize
  isAdopted    Boolean @default(false)
  imageUrl     String?
  location     String
  likes        Int     @default(0)
  owner        User?   @relation("PetOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      Int?

  requests AdoptionRequest[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  petLike   PetLike[]
}

model PetLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId     Int
  createdAt DateTime @default(now())
}

model Comment {
  id          Int           @id @default(autoincrement())
  content     String
  likes       Int           @default(0)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  pet         Pet           @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  commentLike CommentLike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  createdAt DateTime @default(now())
}

model AdoptionRequest {
  id          Int           @id @default(autoincrement())
  pet         Pet           @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId       Int
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  status      RequestStatus @default(PENDING)
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  senderId   Int
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
}
